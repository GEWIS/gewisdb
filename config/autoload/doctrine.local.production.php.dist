<?php

declare(strict_types=1);

use Database\Extensions\Doctrine\DayOfMonth;
use Database\Extensions\Doctrine\Month;
use Doctrine\DBAL\Driver\PDO\PgSQL\Driver as PgSQLDriver;
use Doctrine\Persistence\Mapping\Driver\MappingDriverChain;

return [
    'doctrine' => [
        'connection' => [
            'orm_default' => [
                // configuration instance to use. The retrieved service name will
                // be `doctrine.configuration.$thisSetting`
                'configuration' => 'orm_default',

                // event manager instance to use. The retrieved service name will
                // be `doctrine.eventmanager.$thisSetting`
                'eventmanager'  => 'orm_default',

                // driver class to use.
                'driverClass' => PgSQLDriver::class,

                // connection parameters, see
                // http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html
                'params' => [
                    'host'     => getenv('DOCTRINE_DEFAULT_HOST'),
                    'port'     => getenv('DOCTRINE_DEFAULT_PORT'),
                    'user'     => getenv('DOCTRINE_DEFAULT_USER'),
                    'password' => getenv('DOCTRINE_DEFAULT_PASSWORD'),
                    'dbname'   => getenv('DOCTRINE_DEFAULT_DATABASE'),
                    'charset' => 'utf8',
                    'collate' => 'utf8_unicode_ci',
                ],
            ],
            'orm_report' => [
                // configuration instance to use. The retrieved service name will
                // be `doctrine.configuration.$thisSetting`
                'configuration' => 'orm_report',

                // event manager instance to use. The retrieved service name will
                // be `doctrine.eventmanager.$thisSetting`
                'eventmanager'  => 'orm_report',

                // driver class to use.
                'driverClass' => PgSQLDriver::class,

                // connection parameters, see
                // http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html
                'params' => [
                    'host'     => getenv('DOCTRINE_REPORT_HOST'),
                    'port'     => getenv('DOCTRINE_REPORT_PORT'),
                    'user'     => getenv('DOCTRINE_REPORT_USER'),
                    'password' => getenv('DOCTRINE_REPORT_PASSWORD'),
                    'dbname'   => getenv('DOCTRINE_REPORT_DATABASE'),
                    'charset' => 'utf8',
                    'collate' => 'utf8_unicode_ci',
                ],
            ],
        ],
        // Configuration details for the ORM.
        // See http://docs.doctrine-project.org/en/latest/reference/configuration.html
        'configuration' => [
            // Configuration for service `doctrine.configuration.orm_default` service
            'orm_default' => [
                // metadata cache instance to use. The retrieved service name will
                // be `doctrine.cache.$thisSetting`
                'metadata_cache'    => 'array',

                // DQL queries parsing cache instance to use. The retrieved service
                // name will be `doctrine.cache.$thisSetting`
                'query_cache'       => 'array',

                // ResultSet cache to use.  The retrieved service name will be
                // `doctrine.cache.$thisSetting`
                'result_cache'      => 'array',

                // Hydration cache to use.  The retrieved service name will be
                // `doctrine.cache.$thisSetting`
                'hydration_cache'   => 'array',

                // Mapping driver instance to use. Change this only if you don't want
                // to use the default chained driver. The retrieved service name will
                // be `doctrine.driver.$thisSetting`
                'driver'            => 'orm_default',

                // Generate proxies automatically (turn off for production)
                'generate_proxies'  => false,

                // directory where proxies will be stored. By default, this is in
                // the `data` directory of your application
                'proxy_dir'         => 'data/DoctrineORMModule/Proxy/Default',

                // namespace for generated proxy classes
                'proxy_namespace'   => 'DoctrineORMModule\Proxy',

                // SQL filters. See http://docs.doctrine-project.org/en/latest/reference/filters.html
                'filters'           => [],

                // Custom DQL functions.
                // You can grab common MySQL ones at https://github.com/beberlei/DoctrineExtensions
                // Further docs at http://docs.doctrine-project.org/en/latest/cookbook/dql-user-defined-functions.html
                'datetime_functions' => ['MONTH' => Month::class, 'DAYOFMONTH' => DayOfMonth::class],
                'string_functions' => [],
                'numeric_functions' => [],

                // Second level cache configuration (see doc to learn about configuration)
                'second_level_cache' => [],
            ],
            // Configuration for service `doctrine.configuration.orm_report` service
            'orm_report' => [
                // metadata cache instance to use. The retrieved service name will
                // be `doctrine.cache.$thisSetting`
                'metadata_cache'    => 'array',

                // DQL queries parsing cache instance to use. The retrieved service
                // name will be `doctrine.cache.$thisSetting`
                'query_cache'       => 'array',

                // ResultSet cache to use.  The retrieved service name will be
                // `doctrine.cache.$thisSetting`
                'result_cache'      => 'array',

                // Hydration cache to use.  The retrieved service name will be
                // `doctrine.cache.$thisSetting`
                'hydration_cache'   => 'array',

                // Mapping driver instance to use. Change this only if you don't want
                // to use the default chained driver. The retrieved service name will
                // be `doctrine.driver.$thisSetting`
                'driver'            => 'orm_report',

                // Generate proxies automatically (turn off for production)
                'generate_proxies'  => false,

                // directory where proxies will be stored. By default, this is in
                // the `data` directory of your application
                'proxy_dir'         => 'data/DoctrineORMModule/Proxy/Report',

                // namespace for generated proxy classes
                'proxy_namespace'   => 'DoctrineORMModule\Proxy',

                // SQL filters. See http://docs.doctrine-project.org/en/latest/reference/filters.html
                'filters'           => [],

                // Custom DQL functions.
                // You can grab common MySQL ones at https://github.com/beberlei/DoctrineExtensions
                // Further docs at http://docs.doctrine-project.org/en/latest/cookbook/dql-user-defined-functions.html
                'datetime_functions' => ['MONTH' => Month::class, 'DAYOFMONTH' => DayOfMonth::class],
                'string_functions' => [],
                'numeric_functions' => [],

                // Second level cache configuration (see doc to learn about configuration)
                'second_level_cache' => [],
            ],
        ],
        // Metadata Mapping driver configuration
        'driver' => [
            // Configuration for service `doctrine.driver.orm_default` service
            'orm_default' => [
                // By default, the ORM module uses a driver chain. This allows multiple
                // modules to define their own entities
                'class'   => MappingDriverChain::class,

                // Map of driver names to be used within this driver chain, indexed by
                // entity namespace
                'drivers' => [],
            ],
            // Configuration for service `doctrine.driver.orm_report` service
            'orm_report' => [
                // By default, the ORM module uses a driver chain. This allows multiple
                // modules to define their own entities
                'class'   => MappingDriverChain::class,

                // Map of driver names to be used within this driver chain, indexed by
                // entity namespace
                'drivers' => [],
            ],
        ],
        // Entity Manager instantiation settings
        'entitymanager' => [
            // configuration for the `doctrine.entitymanager.orm_default` service
            'orm_default' => [
                // connection instance to use. The retrieved service name will
                // be `doctrine.connection.$thisSetting`
                'connection'    => 'orm_default',

                // configuration instance to use. The retrieved service name will
                // be `doctrine.configuration.$thisSetting`
                'configuration' => 'orm_default',
            ],
            // configuration for the `doctrine.entitymanager.orm_report` service
            'orm_report' => [
                // connection instance to use. The retrieved service name will
                // be `doctrine.connection.$thisSetting`
                'connection'    => 'orm_report',

                // configuration instance to use. The retrieved service name will
                // be `doctrine.configuration.$thisSetting`
                'configuration' => 'orm_report',
            ],
        ],
        'eventmanager' => [
            // configuration for the `doctrine.eventmanager.orm_default` service
            'orm_default' => [],
            // configuration for the `doctrine.eventmanager.orm_report` service
            'orm_report' => [],
        ],
        // SQL logger collector, used when Laminas\DeveloperTools and its toolbar are active
        'sql_logger_collector' => [
            // configuration for the `doctrine.sql_logger_collector.orm_default` service
            'orm_default' => [],
            // configuration for the `doctrine.sql_logger_collector.orm_report` service
            'orm_report' => [],
        ],
        // mappings collector, used when Laminas\DeveloperTools and its toolbar are active
        'mapping_collector' => [
            // configuration for the `doctrine.sql_logger_collector.orm_default` service
            'orm_default' => [],
            // configuration for the `doctrine.sql_logger_collector.orm_report` service
            'orm_report' => [],
        ],
        // entity resolver configuration, allows mapping associations to interfaces
        'entity_resolver' => [
            // configuration for the `doctrine.entity_resolver.orm_default` service
            'orm_default' => [],
            // configuration for the `doctrine.entity_resolver.orm_report` service
            'orm_report' => [],
        ],
    ],
];
