<?php

/**
 * Local Configuration Override
 *
 * This configuration override file is for overriding environment-specific and
 * security-sensitive configuration information. Copy this file without the
 * .dist extension at the end and populate values as needed.
 *
 * @NOTE: This file is ignored from Git by default with the .gitignore included
 * in ZendSkeletonApplication. This is a good practice, as it prevents sensitive
 * credentials from accidentally being committed into version control.
 */

declare(strict_types=1);

return [
    /**
     * General application config
     */
    'application' => [
        'public_url' => getenv('APP_URL'),
    ],

    /**
     * Proxy configuration.
     */
    'proxy' => [
        'enabled' => boolval(getenv('PROXY_ENABLED')),
        'ip_addresses' => explode(',', getenv('PROXY_IPS') ?: ''),
        'header' => getenv('PROXY_HEADER'),
    ],

    /**
     * Checker service configuration.
     */
    'checker' => [
        'membership_api' => [
            'endpoint' => getenv('CHECKER_MEMBERSHIP_API_ENDPOINT'),
            'key' => getenv('CHECKER_MEMBERSHIP_API_KEY'),
            'max_total_requests' => getenv('CHECKER_MEMBERSHIP_API_MAX_TOTAL_REQUESTS'),
            'max_manual_requests' => getenv('CHECKER_MEMBERSHIP_API_MAX_MANUAL_REQUESTS'),
        ],
    ],

    /**
     * Email configuration.
     */
    'email' => [
        'transport' => 'Smtp',
        'options' => [
            'name' => 'gewis.nl',
            'host' => 'postfix',
            'port' => '1025',
        ],
        'from' => [
            'address' => getenv('MAIL_FROM_ADDRESS'),
            'name' => getenv('MAIL_FROM_NAME'),
        ],
        'from_secretary' => [
            'address' => getenv('MAIL_FROM_SECRETARY_ADDRESS'),
            'name' => getenv('MAIL_FROM_SECRETARY_NAME'),
        ],
        'to' => [
            'checker_result' => [
                'address' => getenv('MAIL_TO_CHECKER_RESULT_ADDRESS'),
                'name' => getenv('MAIL_TO_CHECKER_RESULT_NAME'),
            ],
            'report_error' => [
                'address' => getenv('MAIL_TO_REPORT_ERROR_ADDRESS'),
                'name' => getenv('MAIL_TO_REPORT_ERROR_NAME'),
            ],
            'subscription' => [
                'address' => getenv('MAIL_TO_SUBSCRIPTION_ADDRESS'),
                'name' => getenv('MAIL_TO_SUBSCRIPTION_NAME'),
            ],
        ],
    ],

    /**
     * Mailman REST API configuration.
     */
    'mailman_api' => [
        'endpoint' => getenv('MAILMAN_API_ENDPOINT'),
        'version' => getenv('MAILMAN_API_VERSION'),
        'username' => getenv('MAILMAN_API_USERNAME'),
        'password' => getenv('MAILMAN_API_PASSWORD'),
    ],

    /**
     * LDAP settings for login to database frontend
     */
    'ldap' => [
        'servers' => explode(',', getenv('LDAP_SERVERS')),
        'starttls' => getenv('LDAP_STARTTLS'),
        'domain' => getenv('LDAP_DOMAIN'),
        'filter' => getenv('LDAP_FILTER'),
        'binduser_username' => getenv('LDAP_BINDUSER_USERNAME'),
        'binduser_password' => getenv('LDAP_BINDUSER_PASS'),
        'basedn' => getenv('LDAP_BASEDN'),
    ],

    /**
     * Stripe settings to handle payments
     */
    'stripe' => [
        'api_version' => getenv('STRIPE_API_VERSION'),
        'publishable_key' => getenv('STRIPE_PUBLISHABLE_KEY'),
        'secret_key' => getenv('STRIPE_SECRET_KEY'),
        'webhook_signing_key' => getenv('STRIPE_WEBHOOK_SIGNING_KEY'),
        'membership_price_id' => getenv('STRIPE_MEMBERSHIP_PRICE_ID'),
        'cancel_url' => getenv('STRIPE_CANCEL_URL'),
        'success_url' => getenv('STRIPE_SUCCESS_URL'),
    ],
];
